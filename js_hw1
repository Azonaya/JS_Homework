var test;
test = 'number' + 3 + 3;
// происходит конкатенация и в переменной сейчас значение "number33" типа String.
test = null + 3;
//null становится 0 из-за плюса, в переменной сейчас значение "3" типа Number.
test = 5 && "qwerty";
// Оператор && проверяет все ли значения true. Если хоть одно нет, то он вернет false типа Boolean. Если же все true, то вернет последний операнд.
//В примере выше в переменной сохранится последний операнд "qwerty" типа String.
test = +'40' + +'2' + "hillel";
// Знак + перед строкой преобразует её в тип Number. Получаем 40+2 = 42. После чего происходит конкатенация с строкой "hillel" и в переменной
// сохраняется значение 42hillel типа String.
test = '10' - 5 === 6;
// Когда мы пытаемся от строки "10" отнять число 5 js преобразовывает строку в число. Получаем 5. 5 не равно 6 поэтому в переменной значение 
// false типа Boolean.
test = true + false;
//Когда мы пытаемся сложить true и false из-за знака плюс js преобразовывает их в числа. Получаем 1+0 = 1. В переменной значение 1м типа Number.
test = '4px' - 3;
// JS пытается преобразовать строку в число, но из-за букв у него не выходит. Получается NaN. Nan-3 = Nan. В переменной значение Nan типа Number.
test = '4' - 3;
// JS пытается преобразовать строку в число и у него выходит. Получается 4-3 = 1. В переменной значение 1 типа Number.
test = '6' + 3 ** 0;
// Возведение в степень выше по приритету чем сложение. Поэтому сначала 3 ** 0 = 1. Потом происходит конкатенация строки "6" и числа 1.
// В переменной значение 61 типа String.
test = 12 / '6';
// JS пытается преобразовать строку в число и у него выходит. В переменной значение 2 типа Number.
test = '10' + (5 === 6);
// 5 === 6 дает нам false типа Boolean. Когда мы его пытаемся сложить с строкой происходит конкатенация. В переменной "10false" типа String.
test = null == '';
// Пустая строка все еще строка а не отсутствие данных. Поэтому в переменной false типа Boolean.
test = 3 ** (9 / 3);
//Сначала происходит действие в скобках, потом возведение в степень. 9/3=3. 3**3=27. В переменной 27 типа Number.
test = !!'false' == !!'true';
// Тут происходит двойное преобразование. Первый ! преобразует строку в Boolean с значением false. Второй ! меняет значение false на true. 
//В результате мы получаем true == true и в переменной значение true типа Boolean.
test = 0 || '0' && 1;
// Оператор ИЛИ как и оператор И сохранит в себе значение последнего операнда. При сравнении 0 || '0' = '0' после чего идет '0' && 1 = 1.
// И в переменной сохранится последний операнд 1 типа Number.
test = (+null == false) < 1;
// Оператор + преобразовывает null в число, это 0. False при сравнении с числом также 0. В скобках получаем true типа Boolean. Далее true при сравнении с числом
// приобретает значение 1. 1<1 дает нам false. В переменной false типа Boolean.
test = false && true || true;
// Операторы одинакового приоритета так что слева направо. false && true = false так как оператор И будет true только если обе стороны будут true.
// false || true = true так как оператор ИЛИ будет true если хотя б одна сторона будет true. В переменной true типа Boolean.
test = false && (false || true);
// Ситуация наоборот. Сначала действие в скобках. false || true = true так как оператор ИЛИ будет true если хотя б одна сторона будет true.
// Далее false && true = false так как оператор И будет true только если обе стороны будут true. В переменной false типа Boolean.
test = (+null == false) < 1 ** 5;
// Такая же ситуация как и тремя примерами ранее. Возведение в степень, даже если выполнить его до сравнения все еще даст 1**1 = 1. В переменной false типа Boolean.